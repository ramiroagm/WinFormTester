@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html lang="en">

<CascadingValue Value="IsLoading">
    @if (IsLoading)
    {
        <LoadingSpinner />
    }
    <Router AppAssembly="@typeof(Program).Assembly"
            OnNavigateAsync="OnNavigateAsync">
        ...
    </Router>
</CascadingValue>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["TesterBlazor.styles.css"]" />
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="PageRenderMode" />
</head>

<body>
    <Routes @rendermode="PageRenderMode" />
    <script src="lib/bootstrap/dist/js/popper.min.js"></script>
    <script src="lib/bootstrap/dist/js/bootstrap.js"></script>
    <script src="src/js/js-extra.js"></script>
    <script src="_framework/blazor.web.js"></script>

</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? PageRenderMode =>
        HttpContext.AcceptsInteractiveRouting() ? InteractiveServer : null;

        private bool IsLoading;

    private async Task OnNavigateAsync(NavigationContext args)
    {
        IsLoading = true;
        StateHasChanged();
        await Task.Delay(200);
        IsLoading = false;
        StateHasChanged();
    }
}
