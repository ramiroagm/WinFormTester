@inject IJSRuntime JSRuntime
@inject IPersonas PersonasService
@inject IUtils Utils

<EditForm EditContext="EditContext" OnValidSubmit="GuardarPersona">
    <DataAnnotationsValidator />

    <!-- Modal de Agregar Persona -->
    <div class="modal fade" id="addPersonModal" tabindex="-1" aria-labelledby="addPersonModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addPersonModalLabel">Agregar Persona</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Documento -->
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="floatingInput" placeholder=""
                        @bind="NuevaPersona.NroDocumento"
                        oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                        disabled="@DocumentoDeshabilitado" />
                        <label for="personaDocumento">Documento</label>
                        <ValidationMessage For="@(() => NuevaPersona.NroDocumento)" />
                    </div>

                    <!-- Nombres -->
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="personaNombre" placeholder=""
                                @bind="NuevaPersona.Nombre1">
                                <label for="personaNombre">Primer nombre</label>
                                <ValidationMessage For="@(() => NuevaPersona.Nombre1)" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="personaNombre2" placeholder=""
                                @bind="NuevaPersona.Nombre2">
                                <label for="personaNombre2">Segundo nombre</label>
                            </div>
                        </div>
                    </div>

                    <!-- Apellidos -->
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="personaApellido" placeholder=""
                                @bind="NuevaPersona.Apellido1">
                                <label for="personaApellido">Primer apellido</label>
                                <ValidationMessage For="@(() => NuevaPersona.Apellido1)" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="personaApellido2" placeholder=""
                                @bind="NuevaPersona.Apellido2">
                                <label for="personaApellido2">Segundo apellido</label>
                                <ValidationMessage For="@(() => NuevaPersona.Apellido2)" />
                            </div>
                        </div>
                    </div>

                    <!-- Fecha de nacimiento -->
                    <div class="form-floating mb-3 d-flex align-items-center">
                        <InputDate @bind-Value="NuevaPersona.FechaNacimiento" class="form-control" id="floatingDate" />
                        <label for="floatingDate">Fecha nacimiento</label>
                        <ValidationMessage For="@(() => NuevaPersona.FechaNacimiento)" />

                        <!-- Botón para agregar dirección -->
                        <button type="button" class="btn btn-outline-primary ms-3" @onclick="AbrirModalDireccion">
                            Agregar Dirección
                        </button>
                        <button type="button" class="btn btn-outline-success ms-3" @onclick="AbrirModalDireccion">
                            Agregar Contacto
                        </button>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    <button type="submit" class="btn btn-success" disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="visually-hidden">Guardando...</span>
                        }
                        else
                        {
                            <span>Guardar</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Agregar Dirección -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Agregar Dirección</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="VolverAlModalPersona"></button>
                </div>
                <div class="modal-body">
                    <!-- País -->
                    <div class="form-floating mb-3">
                        <select class="form-select"
                        @bind="SelectedPaisId">
                            <option value="">Seleccione un país</option>
                            @foreach (var pais in Paises)
                            {
                                <option value="@pais.IdPais">@pais.NombrePais</option>
                            }
                        </select>
                        <label for="direccionPais">País</label>
                        <ValidationMessage For="@(() => NuevaPersona.Direccion.Pais)" />
                    </div>

                    <!-- Departamento -->
                    <div class="form-floating mb-3">
                        <select class="form-select"
                        @bind="SelectedDepartamentoId"
                        disabled="@(!DepartamentoEnabled)">
                            <option value="">Seleccione un departamento</option>
                            @foreach (var dep in Departamentos)
                            {
                                <option value="@dep.IdDepartamento">@dep.NombreDepartamento</option>
                            }
                        </select>
                        <label for="direccionCiudad">Departamento</label>
                        <ValidationMessage For="@(() => NuevaPersona.Direccion.Ciudad)" />
                    </div>

                    <!-- Localidad -->
                    <div class="form-floating mb-3">
                        <select class="form-select"
                        @bind="SelectedLocalidadId"
                        disabled="@(!LocalidadEnabled)">
                            <option value="">Seleccione una localidad</option>
                            @foreach (var loc in Localidades)
                            {
                                <option value="@loc.IdLocalidad">@loc.NombreLocalidad</option>
                            }
                        </select>
                        <label for="direccionBarrio">Barrio/Localidad</label>
                        <ValidationMessage For="@(() => NuevaPersona.Direccion.BarrioLocalidad)" />
                    </div>
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="direccionCalle" placeholder="" @bind="NuevaPersona.Direccion.Calle">
                        <label for="direccionCalle">Calle</label>
                        <ValidationMessage For="@(() => NuevaPersona.Direccion.Calle)" />
                    </div>
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionNumeroPuerta" placeholder="" @bind="NuevaPersona.Direccion.NumeroPuerta">
                                <label for="direccionNumeroPuerta">Número de Puerta</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionNumeroApartamento" placeholder="" @bind="NuevaPersona.Direccion.NumeroApartamento">
                                <label for="direccionNumeroApartamento">Número de Apartamento</label>
                            </div>
                        </div>
                    </div>
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionManzana" placeholder="" @bind="NuevaPersona.Direccion.Manzana">
                                <label for="direccionManzana">Manzana</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionSolar" placeholder="" @bind="NuevaPersona.Direccion.Solar">
                                <label for="direccionSolar">Solar</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-floating mb-3">
                        <textarea class="form-control" id="direccionComentarios" placeholder="" @bind="NuevaPersona.Direccion.Observaciones"></textarea>
                        <label for="direccionComentarios">Comentarios</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="VolverAlModalPersona">Continuar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal agregar contacto TODO BASADO EN ESTE MODAL -->
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAddressModalLabel">Agregar Dirección</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="VolverAlModalPersona"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionNumeroPuerta" placeholder="" @bind="NuevaPersona.Direccion.NumeroPuerta">
                                <label for="direccionNumeroPuerta">Correo electrónico</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionNumeroApartamento" placeholder="" @bind="NuevaPersona.Direccion.NumeroApartamento">
                                <label for="direccionNumeroApartamento">Número de Apartamento</label>
                            </div>
                        </div>
                    </div>
                    <div class="row g-3 mb-3">
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionManzana" placeholder="" @bind="NuevaPersona.Direccion.Manzana">
                                <label for="direccionManzana">Manzana</label>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="direccionSolar" placeholder="" @bind="NuevaPersona.Direccion.Solar">
                                <label for="direccionSolar">Solar</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-floating mb-3">
                        <textarea class="form-control" id="direccionComentarios" placeholder="" @bind="NuevaPersona.Direccion.Observaciones"></textarea>
                        <label for="direccionComentarios">Comentarios</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="VolverAlModalPersona">Continuar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Errores del formulario -->
    @if (HasValidationErrors)
    {
        <div class="card ms-3" style="width: 350px;">
            <div class="card-header text-center">
                ⚠️ Errores del formulario ⚠️
            </div>
            <div class="card-body text-start">
                <div class="validation-summary">
                    <ul class="mb-0 ps-3">
                        <ValidationSummary />
                    </ul>
                </div>
            </div>
            <div class="card-footer text-muted text-center">
                De no encontrarse errores se podrá continuar
            </div>
        </div>
    }
</EditForm>

<ModalPersonaOk />
<ModalPersonaFail />

@code {
    private Persona NuevaPersona { get; set; } = new Persona()
    {
        Direccion = new DireccionPersona(),
        FechaNacimiento = DateTime.Today
    };

    private bool IsLoading { get; set; } = false;
    private EditContext EditContext { get; set; }
    private bool HasValidationErrors => EditContext?.GetValidationMessages().Any() == true;

    private List<Pais> Paises = new();
    private List<Departamento> Departamentos = new();
    private List<Localidad> Localidades = new();

    private int? selectedPaisId;
    private int? SelectedPaisId
    {
        get => selectedPaisId;
        set
        {
            if (selectedPaisId != value)
            {
                selectedPaisId = value;
                _ = OnPaisChanged();
            }
        }
    }

    private int? selectedDepartamentoId;
    private int? SelectedDepartamentoId
    {
        get => selectedDepartamentoId;
        set
        {
            if (selectedDepartamentoId != value)
            {
                selectedDepartamentoId = value;
                _ = OnDepartamentoChanged();
            }
        }
    }

    private int? selectedLocalidadId;
    private int? SelectedLocalidadId
    {
        get => selectedLocalidadId;
        set
        {
            if (selectedLocalidadId != value)
            {
                selectedLocalidadId = value;
                OnLocalidadChanged();
            }
        }
    }

    private bool DepartamentoEnabled => SelectedPaisId.HasValue;
    private bool LocalidadEnabled => SelectedDepartamentoId.HasValue;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(NuevaPersona);
    }

    protected override async Task OnInitializedAsync()
    {
        Paises = await Utils.ObtenerPaises();
    }

    private bool DocumentoDeshabilitado { get; set; }
    public async Task ShowAsync(string? documento)
    {
        if (int.TryParse(documento, out var nro))
        {
            NuevaPersona.NroDocumento = nro;
            DocumentoDeshabilitado = true;
        }
        else
        {
            NuevaPersona.NroDocumento = null;
            DocumentoDeshabilitado = false;
        }

        EditContext = new EditContext(NuevaPersona);

        await InvokeAsync(StateHasChanged);
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("showModal", "addPersonModal");
    }


    private async Task OnPaisChanged()
    {
        Departamentos = SelectedPaisId.HasValue ? await Utils.ObtenerDepartamentos(SelectedPaisId.Value) : new();
        SelectedDepartamentoId = null;
        Localidades = new();
        SelectedLocalidadId = null;
        NuevaPersona.Direccion.Pais = Paises.FirstOrDefault(p => p.IdPais == SelectedPaisId)?.NombrePais;
        NuevaPersona.Direccion.Ciudad = null;
        NuevaPersona.Direccion.BarrioLocalidad = null;
        StateHasChanged();
    }

    private async Task OnDepartamentoChanged()
    {
        Localidades = SelectedDepartamentoId.HasValue ? await Utils.ObtenerLocalidades(SelectedDepartamentoId.Value) : new();
        SelectedLocalidadId = null;
        NuevaPersona.Direccion.Ciudad = Departamentos.FirstOrDefault(d => d.IdDepartamento == SelectedDepartamentoId)?.NombreDepartamento;
        NuevaPersona.Direccion.BarrioLocalidad = null;
        StateHasChanged();
    }

    private void OnLocalidadChanged()
    {
        NuevaPersona.Direccion.BarrioLocalidad = Localidades.FirstOrDefault(l => l.IdLocalidad == SelectedLocalidadId)?.NombreLocalidad;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeModals");
            await JSRuntime.InvokeVoidAsync("initializeModalEvents");
        }
    }

    private async void GuardarPersona()
    {
        IsLoading = true;
        try
        {
            InfoCreditoPersona personaGuardar = MapearPersona(NuevaPersona);
            bool result = await PersonasService.CrearPersona(personaGuardar);

            await JSRuntime.InvokeVoidAsync("closeModal", "addPersonModal");
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("showModal", "successModal");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showModal", "errorModal");
            }
            LimpiarFormulario();
            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            IsLoading = false;
        }
    }


    private async Task AbrirModalDireccion()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "addPersonModal");
        await Task.Delay(200);
        await JSRuntime.InvokeVoidAsync("showModal", "addAddressModal");
    }

    private async void VolverAlModalPersona()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "addAddressModal");
        await Task.Delay(200);
        await JSRuntime.InvokeVoidAsync("showModal", "addPersonModal");
    }

    private void LimpiarFormulario()
    {
        NuevaPersona = new Persona
            {
                Direccion = new DireccionPersona(),
                FechaNacimiento = DateTime.Today
            };
        DocumentoDeshabilitado = false;
        SelectedPaisId = null;
        SelectedDepartamentoId = null;
        SelectedLocalidadId = null;
        EditContext = new EditContext(NuevaPersona);
    }


    private InfoCreditoPersona MapearPersona(Persona persona)
    {
        return new InfoCreditoPersona
        {
            Documento = persona.NroDocumento ?? 0,
            PrimerNombre = persona.Nombre1,
            SegundoNombre = persona.Nombre2,
            PrimerApellido = persona.Apellido1,
            SegundoApellido = persona.Apellido2,
            FechaNacimiento = persona.FechaNacimiento,
            Direccion = MapearDireccion(persona.Direccion)
        };
    }

    private InfoCreditoDireccionPersona MapearDireccion(DireccionPersona direccion)
    {
        var localidad = Localidades.FirstOrDefault(l => l.NombreLocalidad == direccion.BarrioLocalidad);

        if (localidad == null)
        {
            localidad = new Localidad
            {
                IdLocalidad = 0,
                NombreLocalidad = direccion.BarrioLocalidad ?? string.Empty
            };
        }

        return new InfoCreditoDireccionPersona
        {
            Localidad = localidad,
            Calle = direccion.Calle,
            Numero = int.TryParse(direccion.NumeroPuerta, out var n) ? n : 0,
            Manzana = int.TryParse(direccion.Manzana, out var m) ? m : 0,
            Solar = int.TryParse(direccion.Solar, out var s) ? s : 0,
            Observaciones = direccion.Observaciones
        };
    }
}