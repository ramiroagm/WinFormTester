@inject IPersonas PersonasService
@inject INucleos NucleosService
@inject IJSRuntime JSRuntime

<!-- Modal de Agregar Nucleo -->
<div class="modal-body">
    <h6>Nuevo nucleo</h6>
    <button type="button" class="btn btn-primary mb-2" @onclick="AgregarPersona">➕</button>
    <table class="table">
        <thead>
            <tr>
                <th>Documento</th>
                <th>Nombre completo</th>
                <th>Estado búsqueda</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (Nucleo != null)
            {
                @foreach (var p in Nucleo.Personas)
                {
                    <tr>
                        <td>
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="floatingInput" placeholder=""
                                       oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                                       @onchange="()=> ValidarPersona(MapearPersona(p))" />
                                <label for="personaDocumento">Documento</label>
                            </div>
                        </td>
                        <td>
                            @if (personas.Count > 0)
                            {
                                <span class="badge bg-success">Validado</span>
                            }
                            else
                            {
                                <span class="badge bg-warning">Pendiente</span>
                            }
                        </td>
                        <td>
                            <button type="button" class="btn btn-outline-info" @onclick="()=> VerPersona(MapearPersona(p))">👁️</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="()=> QuitarDocumento(MapearPersona(p))">🗑️</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public InfoCreditoNucleo? Nucleo { get; set; }
    private List<Persona> personas = new();
    private TesterProject.BusinessEntities.InfoCredito.InfoCreditoPersona? PersonaEncontrada { get; set; }

    private void AgregarPersona()
    {
        personas.Add(new Persona());
    }

    private void QuitarDocumento(Persona persona)
    {
        personas.Remove(persona);
    }

    private void ValidarPersona(Persona persona)
    {
        // List<TesterProject.BusinessEntities.InfoCredito.InfoCreditoPersona> personas = await PersonasService.ObtenerPersonas(Convert.ToInt32(DocumentoBusqueda));
        // if (personas.Count > 0)
        // {
        //     PersonaEncontrada = personas.FirstOrDefault();
        //     await InvokeAsync(StateHasChanged);
        //     await ModalResultadoBusquedaPersonaRef?.ShowAsync();
        // }
        // else
        // {
        //     PersonaEncontrada = null;
        //     await InvokeAsync(StateHasChanged);
        //     await ModalResultadoBusquedaPersonaRef?.ShowAsync();
        // }
    }

    Persona MapearPersona(InfoCreditoPersona persona)
    {
        return new Persona
        {
        };
    }

    private void VerPersona(Persona documento)
    {

    }
}