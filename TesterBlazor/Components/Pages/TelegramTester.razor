@using TesterProject
@using TesterProject.BusinessEntities

@inject TesterProject.BusinessLogic.TelegramBot.TelegramConnector TelegramConnector


@page "/telegram"

<PageTitle>Tester de Telegram</PageTitle>

<h2> 🤖 Tester de Telegram</h2>

<div class="input-group mb-3">
    <strong>A continuación se mostrará un ejemplo básico de conexión y obtención de información con un bot de Telegram.</strong>
</div>
<div class ="input-group mb-3">
    <label>El bot al que nos estaremos conectando se llama</label>&nbsp;<a href="https://t.me/del_monte_bot" target="_blank">@@DelMonteTester</a>&nbsp;<label>y se podrá encontrar escaneando el siguiente código QR:</label>
    <div class="input-group mb-3" style="margin-top: 30px;">
        <img class="img-thumbnail rounded mx-auto d-block" width="30%" src="../src/del_monte_bot.png" />
    </div>
</div>

<div class="input-group mb-3">
    <h3> 🧪 Zona de prueba</h3>
    <div class="input-group mb-3" style="display: flex; gap: 20px;">
        <div style="flex: 1;">
            <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px;">
                <legend>Ventana de Resultado</legend>
                <textarea class="form-control" rows="5" style="width: 100%;margin-bottom: 10px" @bind=ResultMessage readonly></textarea>
                <button class="btn btn-secondary" style="margin-top: 10px; width: 100%;" @onclick="ClearResultMessage">Limpiar</button>
            </fieldset>
            <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px;">
                <legend>Logs y Excepciones</legend>
                <textarea class="form-control" rows="5" style="width: 100%; margin-bottom: 10px" @bind=ErrorMessage readonly></textarea>
                <button class="btn btn-secondary" style="margin-top: 10px; width: 100%;" @onclick="ClearLogWindow">Limpiar</button>
            </fieldset>
        </div>

        <div class="form-floating" style="flex: 1;">
            <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px;">
                <legend>Servicio de Telegram</legend>
                <button class="btn btn-primary" style="width: 100%; margin-bottom: 10px;" @onclick="ConnectToTelegram" >Conectar</button>
                <div style="display: flex; gap: 10px;margin-top: 10px">
                    <button class="btn btn-secondary style="flex: 1;">Enviar mensaje</button>
                    <input class="form-control" type="text" style="flex: 2;" placeholder="Mensaje...">
                </div>
            </fieldset>
        </div>
    </div>

</div>

@code {
    private string ResultMessage { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    private int MessageCounter { get; set; } = 1;
    private int ErrorLineCounter { get; set; } = 1;

    protected override void OnInitialized()
    {
        TelegramConnector.MessageReceived += OnMessageReceived;
        TelegramConnector.UpdateOccurred += OnUpdateOccured;
        TelegramConnector.ErrorOccurred += OnErrorOccurred;
    }

    public void Dispose()
    {
        TelegramConnector.MessageReceived -= OnMessageReceived;
    }

    private async Task ConnectToTelegram()
    {
        var res = await TelegramConnector.InitializeBot();
        ResultMessage += $"[{MessageCounter}] - {res.UserName} {res.Message}{Environment.NewLine}";
        MessageCounter++;
    }

    private void OnMessageReceived(object? sender, TelegramResult e)
    {
        ResultMessage += $"[{MessageCounter}] - {e.UserName} {e.Message}{Environment.NewLine}";
        MessageCounter++;
        InvokeAsync(StateHasChanged);
    }

    private void OnUpdateOccured(object? sender, TelegramResult e)
    {
        ResultMessage += $"[{MessageCounter}] - {e.UserName} {e.Message}{Environment.NewLine}";
        MessageCounter++;
        InvokeAsync(StateHasChanged);
    }

    private void OnErrorOccurred(object? sender, TelegramResult e)
    {
        ErrorMessage += $"[{ErrorLineCounter}] - {e.MsgTypeId} {e.Message}";
        ErrorLineCounter++;
        InvokeAsync(StateHasChanged);
    }

    private void ClearResultMessage()
    {
        ResultMessage = string.Empty;
        MessageCounter = 1;
    }

    private void ClearLogWindow()
    {
        ErrorMessage = string.Empty;
        ErrorLineCounter = 1;
    }
}
