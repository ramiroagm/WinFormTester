@using TesterBlazor.Models
@using TesterBlazor.Services
@using TesterProject
@using TesterProject.BusinessEntities

@inject TesterProject.BusinessLogic.TelegramBot.TelegramConnector TelegramConnector
@inject TelegramService TelegramService

@inject IJSRuntime JSRuntime

@page "/telegram"

<PageTitle>Tester de Telegram</PageTitle>

<h2> 🤖 Tester de Telegram</h2>

<div class="input-group mb-3">
    <strong>A continuación se mostrará un ejemplo básico de conexión y obtención de información con un bot de Telegram.</strong>
</div>
<div class="input-group mb-3">
    <label>El bot al que nos estaremos conectando se llama</label>&nbsp;<a href="https://t.me/del_monte_bot" target="_blank">@@DelMonteTester</a>&nbsp;<label>y se podrá encontrar escaneando el siguiente código QR:</label>
    <div class="input-group mb-3" style="margin-top: 30px;">
        <img class="img-thumbnail rounded mx-auto d-block" width="30%" src="../src/del_monte_bot.png" />
    </div>
</div>

<div class="input-group mb-3">
    <h4> 🧪 Zona de prueba</h4>
    <div class="input-group mb-3" style="display: flex; gap: 20px;">
        <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px; border-radius: 10px;">
            <legend>Servicio de Telegram</legend>
            <div style="display: flex; gap: 10px;margin-top: 10px">
                <button class="btn btn-primary" style="width:100%" @onclick="ConnectToTelegram">Conectar</button>
                <button type="button" class="btn btn-lg btn-outline-warning"
                        data-bs-toggle="popover"
                        data-bs-title="Información"
                        data-bs-content="Se lanzará una excepción si el BOT ya estuviera conectando y ejecutándose">
                    ❗
                </button>
            </div>
            <div style="display: flex; gap: 10px;margin-top: 10px">
                <button class="btn btn-secondary">Enviar mensaje</button>
                <input class="form-control" type="text" style="flex: 2;" placeholder="Mensaje...">
                <button type="button" class="btn btn-lg btn-outline-danger"
                        data-bs-toggle="popover"
                        data-bs-title="Ayuda"
                        data-bs-content="Se enviará mensaje al chat si el bot está activo">❓
                </button>
            </div>
        </fieldset>
    </div>
    <div class="input-group mb-3" style="display: flex; gap: 20px;">
        <div style="flex: 1;">
            <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px; border-radius: 10px;">
                <legend>Ventana de Resultado</legend>
                <textarea class="form-control" rows="5" style="width: 100%;margin-bottom: 10px" @bind=ResultMessage readonly></textarea>
                <button class="btn btn-secondary" style="margin-top: 10px; width: 100%;" @onclick="ClearResultMessage">Limpiar</button>
            </fieldset>
            <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px; border-radius: 10px;">
                <legend>Logs y Excepciones</legend>
                <textarea class="form-control" rows="5" style="width: 100%; margin-bottom: 10px" @bind=ErrorMessage readonly></textarea>
                <button class="btn btn-secondary" style="margin-top: 10px; width: 100%;" @onclick="ClearLogWindow">Limpiar</button>
            </fieldset>
        </div>
    </div>
</div>

<div class="input-group-mb-2">
    <h4> 📒 Consulta de datos</h4>

    <div class="card text-center" style="margin-bottom:20px">
        <div class="card-header">
            ℹ️ Información
        </div>
        <div class="card-body">
            <h5 class="card-title">Funcionamiento de la siguiente tabla</h5>
            <p class="card-text">
                Esta tabla hace llamado a una API que se encuentra creada dentro de la misma solución.
                No se hace referencia directa al servicio para diferenciarse del ejemplo anterior.
            </p>
        </div>
        <div class="card-footer text-muted">
            ⚠️ Advertencia ⚠️
            <br />
            Esta API no es pública y no se recomienda su uso fuera de este contexto.
        </div>
    </div>

    <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px; border-radius: 10px;">
        <legend>Filtrado de datos</legend>

        <div class="form-floating mb-3">
            <input type="number" @bind="ChatId" class="form-control" id="floatingInput" placeholder="Escriba número de identificador...">
            <label for="floatingInput">Identificador del chat</label>
        </div>

        <div class="input-group">
            <span class="input-group-text">@@</span>
            <div class="form-floating">
                <input type="text" class="form-control" id="floatingInputGroup2" @bind="UserName" placeholder="Escriba nombre de usuario">
                <label for="floatingInputGroup2">Nombre de usuario</label>
            </div>
        </div>

        <div class="form-floating" style="margin-top:10px">
            <InputDate @bind-Value="MsgSentTime" class="form-control" id="floatingDate" />
            <label for="floatingDate">Seleccione una fecha</label>
        </div>
        <button type="button" class="btn btn-success" style="margin-top:10px" @onclick="LoadMessages">Cargar mensajes</button>
    </fieldset>
    @if (Messages == null)
    {
        <div class="card text-center" style="margin-top:15px">
            <div class="card-header">
                ⚠️ Advertencia ⚠️
            </div>
            <div class="card-body">
                <h5 class="card-title">No hay datos</h5>
                <p class="card-text">No se encontró información o no hay datos para la búsqueda</p>
            </div>
        </div>
    }
    else
    {
        <fieldset style="border: 1px solid #ccc; padding: 10px; margin-bottom: 20px; border-radius: 10p">
            <table class="table table-active table-hover">
                <thead>
                    <tr>
                        <th scope="col">Usuario</th>
                        <th scope="col">Mensaje</th>
                        <th scope="col">Fecha y hora</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var message in Messages)
                    {
                        <tr>
                            <th>@message.UserName</th>
                            <th>@message.Message</th>
                            <th>@message.MsgSentTime</th>
                        </tr>
                    }
                </tbody>
            </table>
        </fieldset>
    }
</div>

@code {
    private string ResultMessage { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    private int MessageCounter { get; set; } = 1;
    private int ErrorLineCounter { get; set; } = 1;

    private long? ChatId;
    private string? UserName;
    private DateTime? MsgSentTime;
    private List<TelegramApiResult>? Messages;

    protected override void OnInitialized()
    {
        TelegramConnector.MessageReceived += OnMessageReceived;
        TelegramConnector.UpdateOccurred += OnUpdateOccured;
        TelegramConnector.ErrorOccurred += OnErrorOccurred;
    }

    public void Dispose()
    {
        TelegramConnector.MessageReceived -= OnMessageReceived;
    }

    private async Task ConnectToTelegram()
    {
        var res = await TelegramConnector.InitializeBot();
        ResultMessage += $"[{MessageCounter}] - {res.UserName} {res.Message}{Environment.NewLine}";
        MessageCounter++;
    }

    private void OnMessageReceived(object? sender, TelegramResult e)
    {
        ResultMessage += $"[{MessageCounter}] - {e.UserName} {e.Message}{Environment.NewLine}";
        MessageCounter++;
        InvokeAsync(StateHasChanged);
    }

    private void OnUpdateOccured(object? sender, TelegramResult e)
    {
        ResultMessage += $"[{MessageCounter}] - {e.UserName} {e.Message}{Environment.NewLine}";
        MessageCounter++;
        InvokeAsync(StateHasChanged);
    }

    private void OnErrorOccurred(object? sender, TelegramResult e)
    {
        ErrorMessage += $"[{ErrorLineCounter}] - {e.MsgTypeId} {e.Message}{Environment.NewLine}";
        ErrorLineCounter++;
        InvokeAsync(StateHasChanged);
    }

    private void ClearResultMessage()
    {
        ResultMessage = string.Empty;
        MessageCounter = 1;
    }

    private void ClearLogWindow()
    {
        ErrorMessage = string.Empty;
        ErrorLineCounter = 1;
    }

    private async Task LoadMessages()
    {
        if (!string.IsNullOrEmpty(UserName))
        {
            UserName.PadLeft(1, '@');
        }
        Messages = await TelegramService.GetTelegramMessagesAsync(ChatId, UserName, MsgSentTime);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializePopovers");
        }
    }
}
