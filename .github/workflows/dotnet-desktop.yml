name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: WinFormTester.sln
      Blazor_Project_Path: TesterBlazor/TesterBlazor.csproj
      Library_Project_Path: TesterProject/TesterProject.csproj
      Publish_Output: ./deploy
      Test_Project_Path: TestPro\TestPro.csproj 
      Wap_Project_Directory: TesterProject
      DatabaseProj: TesterDatabase\TesterDatabase.sqlproj
      WINDOWS_SERVER_IP: ${{ secrets.WINDOWS_SERVER_IP }}
      WINDOWS_SERVER_USERNAME: ${{ secrets.WINDOWS_SERVER_USERNAME }}
      WINDOWS_SERVER_PASSWORD: ${{ secrets.WINDOWS_SERVER_PASSWORD }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Remove SSDT project from solution
      run: dotnet sln ${{ env.Solution_Name }} remove ${{ env.DatabaseProj }}

    - name: Install dependencies
      run: dotnet restore ${{ env.Solution_Name }}
      
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Build solution excluding SSDT project
      run: dotnet build ${{ env.Solution_Name }} -c ${{ matrix.configuration }}
  
    - name: Execute unit tests
      run: dotnet test

    - name: Install dependencies for TesterProject
      run: dotnet restore ${{ env.Library_Project_Path }}

    - name: Create Deploy Directory
      run: mkdir -p ${{ env.Publish_Output }}

    - name: Build TesterProject libraries
      run: dotnet build ${{ env.Library_Project_Path }} -c ${{ matrix.configuration }}

    - name: Publish TesterProject libraries
      run: dotnet publish ${{ env.Library_Project_Path }} -c ${{ matrix.configuration }} -o ${{ env.Publish_Output }}/TesterProject

    - name: Debug Published Library Output
      run: dir ${{ env.Publish_Output }}/TesterProject

    - name: PowerShell Remoting - Transfer files to server
      shell: pwsh
      run: |
        # Asegúrate de que las variables no sean nulas
        $username = "${{ secrets.WINDOWS_SERVER_USERNAME }}"
        $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $password)

        # Dirección IP del servidor
        $server_ip = "${{ secrets.WINDOWS_SERVER_IP }}"
        
        # Verifica si la IP está correcta
        if (-not $server_ip) {
          Write-Host "La IP del servidor no está configurada correctamente"
          exit 1
        }

        # Establecer sesión remota
        $session = New-PSSession -ComputerName $server_ip -Credential $cred -Authentication Default

        # Transferir los archivos publicados al servidor
        Invoke-Command -Session $session -ScriptBlock {
          $remotePath = "C:\lib\TesterProject"
          $localPath = "${{ env.Publish_Output }}/TesterProject/*"
          
          # Verificar si el directorio existe, si no, crearlo
          if (-not (Test-Path $remotePath)) {
            New-Item -ItemType Directory -Path $remotePath
          }

          # Copiar archivos
          Copy-Item -Path $localPath -Destination $remotePath -Recurse -Force
          Write-Host "Archivos copiados con éxito a $remotePath"
        }

        # Cerrar sesión remota
        Remove-PSSession -Session $session