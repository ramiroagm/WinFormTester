name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: WinFormTester.sln

      Blazor_Project_Path: TesterBlazor/TesterBlazor.csproj
      Library_Project_Path: TesterProject/TesterProject.csproj
      Api_Project_Path: TesterApi/TesterApi.csproj
      Worker_Project_Path: TesterWorkerService/TesterWorkerService.csproj
      Test_Project_Path: TestPro/TestPro.csproj 
      DatabaseProj: TesterDatabase/TesterDatabase.sqlproj

      Publish_Output: ./deploy
      WINDOWS_SERVER_IP: ${{ secrets.WINDOWS_SERVER_IP }}
      WINDOWS_SERVER_USERNAME: ${{ secrets.WINDOWS_SERVER_USERNAME }}
      WINDOWS_SERVER_PASSWORD: ${{ secrets.WINDOWS_SERVER_PASSWORD }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Remove SSDT project from solution
      run: dotnet sln ${{ env.Solution_Name }} remove ${{ env.DatabaseProj }}

    - name: Install dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Build solution
      run: dotnet build ${{ env.Solution_Name }} -c ${{ matrix.configuration }}

    - name: Execute unit tests
      run: dotnet test -c Release

    - name: Create Deploy Directory
      run: mkdir -p ${{ env.Publish_Output }}

    - name: Publish All Projects
      run: |
        dotnet publish ${{ env.Library_Project_Path }} -c Release -o ${{ env.Publish_Output }}/TesterProject
        dotnet publish ${{ env.Blazor_Project_Path }} -c Release -o ${{ env.Publish_Output }}/TesterBlazor
        dotnet publish ${{ env.Api_Project_Path }} -c Release -o ${{ env.Publish_Output }}/TesterApi
        dotnet publish ${{ env.Worker_Project_Path }} -c Release -o ${{ env.Publish_Output }}/TesterWorkerService

    - name: Enable WinRM Unencrypted Traffic
      run: |
        Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value true
        Set-Item WSMan:\localhost\Client\TrustedHosts -Value "*" -Force
      shell: pwsh

    - name: Stop Blazor Process on Server
      run: |
        $username = "${{ secrets.WINDOWS_SERVER_USERNAME }}"
        $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $password)
        $server_ip = "${{ secrets.WINDOWS_SERVER_IP }}"

        $session = New-PSSession -ComputerName $server_ip -Credential $cred -Authentication Basic

        Invoke-Command -Session $session -ScriptBlock {
          $proc = Get-Process -Name "dotnet" -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*TesterBlazor*" }
          if ($proc) {
            $proc | Stop-Process -Force
            Write-Host "Blazor process stopped."
          } else {
            Write-Host "No Blazor process running."
          }
        }

        Remove-PSSession -Session $session
      shell: pwsh

    - name: Stop Worker Service on Remote Server
      run: |
        $username = "${{ secrets.WINDOWS_SERVER_USERNAME }}"
        $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $password)
        $server_ip = "${{ secrets.WINDOWS_SERVER_IP }}"
        $serviceName = "TesterWorkerService"

        $session = New-PSSession -ComputerName $server_ip -Credential $cred -Authentication Basic

        Invoke-Command -Session $session -ScriptBlock {
          param($serviceName)
          $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          if ($service -and $service.Status -eq 'Running') {
            Stop-Service -Name $serviceName -Force
            Write-Host "Worker service $serviceName stopped."
          } else {
            Write-Host "Worker service $serviceName is not running or not found."
          }
        } -ArgumentList $serviceName

        Remove-PSSession -Session $session
      shell: pwsh

    - name: Transfer Files Using Robocopy with Authenticated PSDrive
      run: |
        $username = "${{ secrets.WINDOWS_SERVER_USERNAME }}"
        $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $password)
        $server_ip = "${{ secrets.WINDOWS_SERVER_IP }}"
        $deployRoot = "${{ github.workspace }}\${{ env.Publish_Output }}"
    
        $projects = @("TesterProject", "TesterBlazor", "TesterApi", "TesterWorkerService")
        $netDrive = "Z:"
    
        if (Test-Path $netDrive) {
            Remove-PSDrive -Name "Z" -Force
        }
    
        New-PSDrive -Name "Z" -PSProvider FileSystem -Root "\\$server_ip\c$" -Credential $cred -Persist
    
        foreach ($project in $projects) {
            $source = Join-Path $deployRoot $project
            $destination = "Z:\lib\$project"
            robocopy $source $destination /E /R:5 /W:3 /NFL /NDL /NP
            if ($LASTEXITCODE -ge 8) {
                throw "Robocopy failed for $project with exit code $LASTEXITCODE"
            } else {
                Write-Host "$project copied successfully."
            }
        }
    
        Remove-PSDrive -Name "Z" -Force
      shell: pwsh

    - name: Restart Worker Service
      run: |
        $username = "${{ secrets.WINDOWS_SERVER_USERNAME }}"
        $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $password)
        $server_ip = "${{ secrets.WINDOWS_SERVER_IP }}"
        $serviceName = "TesterWorkerService"

        $session = New-PSSession -ComputerName $server_ip -Credential $cred -Authentication Basic

        Invoke-Command -Session $session -ScriptBlock {
          param($serviceName)
          Restart-Service -Name $serviceName -Force
          Write-Host "Worker service restarted."
        } -ArgumentList $serviceName

        Remove-PSSession -Session $session
      shell: pwsh
