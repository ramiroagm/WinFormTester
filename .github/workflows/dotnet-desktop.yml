name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: WinFormTester.sln
      Blazor_Project_Path: TesterBlazor/TesterBlazor.csproj
      Library_Project_Path: TesterProject/TesterProject.csproj
      Worker_Service_Path: TesterWorkerService/TesterWorkerService.csproj
      Publish_Output: ./deploy
      Test_Project_Path: TestPro/TestPro.csproj 
      Wap_Project_Directory: TesterProject
      DatabaseProj: TesterDatabase/TesterDatabase.sqlproj
      WINDOWS_SERVER_IP: ${{ secrets.WINDOWS_SERVER_IP }}
      WINDOWS_SERVER_USERNAME: ${{ secrets.WINDOWS_SERVER_USERNAME }}
      WINDOWS_SERVER_PASSWORD: ${{ secrets.WINDOWS_SERVER_PASSWORD }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Remove SSDT project from solution
      run: dotnet sln ${{ env.Solution_Name }} remove ${{ env.DatabaseProj }}

    - name: Install dependencies
      run: dotnet restore ${{ env.Solution_Name }}
      
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Build solution excluding SSDT project
      run: dotnet build ${{ env.Solution_Name }} -c ${{ matrix.configuration }}
  
    - name: Execute unit tests
      run: dotnet test

    - name: Publish Worker Service
      run: dotnet publish ${{ env.Worker_Service_Path }} -c ${{ matrix.configuration }} -o ${{ env.Publish_Output }}/TesterWorkerService

    - name: Transfer Worker Service files to Windows Server
      run: |
        $username = "${{ secrets.WINDOWS_SERVER_USERNAME }}"
        $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential($username, $password)
        $server_ip = "${{ secrets.WINDOWS_SERVER_IP }}"

        $session = New-PSSession -ComputerName $server_ip -Credential $cred -Authentication Basic

        # Worker Service
        $localWorkerServicePath = "${{ env.Publish_Output }}/TesterWorkerService/*"
        $remoteWorkerServicePath = "C:\lib\TesterWorkerService"
        Invoke-Command -Session $session -ScriptBlock {
          param($remoteWorkerServicePath)
          if (-not (Test-Path $remoteWorkerServicePath)) {
            New-Item -ItemType Directory -Path $remoteWorkerServicePath | Out-Null
          }
        } -ArgumentList $remoteWorkerServicePath
        Copy-Item -Path $localWorkerServicePath -Destination $remoteWorkerServicePath -Recurse -ToSession $session -Force

        Write-Host "Archivos del Worker Service copiados con éxito a $remoteWorkerServicePath"

        Remove-PSSession -Session $session
      shell: pwsh